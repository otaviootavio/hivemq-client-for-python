[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "paho.mqtt.client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paho.mqtt.client",
        "description": "paho.mqtt.client",
        "detail": "paho.mqtt.client",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "SSLContextFactory",
        "importPath": "mqtt_client.ssl_context",
        "description": "mqtt_client.ssl_context",
        "isExtraImport": true,
        "detail": "mqtt_client.ssl_context",
        "documentation": {}
    },
    {
        "label": "HiveMQSSLContextFactory",
        "importPath": "mqtt_client.ssl_context",
        "description": "mqtt_client.ssl_context",
        "isExtraImport": true,
        "detail": "mqtt_client.ssl_context",
        "documentation": {}
    },
    {
        "label": "MessageHandler",
        "importPath": "mqtt_client.message_handler",
        "description": "mqtt_client.message_handler",
        "isExtraImport": true,
        "detail": "mqtt_client.message_handler",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "mqtt_client.message_handler",
        "description": "mqtt_client.message_handler",
        "isExtraImport": true,
        "detail": "mqtt_client.message_handler",
        "documentation": {}
    },
    {
        "label": "DefaultMessageHandler",
        "importPath": "mqtt_client.message_handler",
        "description": "mqtt_client.message_handler",
        "isExtraImport": true,
        "detail": "mqtt_client.message_handler",
        "documentation": {}
    },
    {
        "label": "ConnectionHandler",
        "importPath": "mqtt_client.connection_handler",
        "description": "mqtt_client.connection_handler",
        "isExtraImport": true,
        "detail": "mqtt_client.connection_handler",
        "documentation": {}
    },
    {
        "label": "DefaultConnectionHandler",
        "importPath": "mqtt_client.connection_handler",
        "description": "mqtt_client.connection_handler",
        "isExtraImport": true,
        "detail": "mqtt_client.connection_handler",
        "documentation": {}
    },
    {
        "label": "ssl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ssl",
        "description": "ssl",
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "ConfigurationManager",
        "importPath": "mqtt_client.config",
        "description": "mqtt_client.config",
        "isExtraImport": true,
        "detail": "mqtt_client.config",
        "documentation": {}
    },
    {
        "label": "MQTTClientWrapper",
        "importPath": "mqtt_client.mqtt_client",
        "description": "mqtt_client.mqtt_client",
        "isExtraImport": true,
        "detail": "mqtt_client.mqtt_client",
        "documentation": {}
    },
    {
        "label": "ConfigurationManager",
        "kind": 6,
        "importPath": "mqtt_client.config",
        "description": "mqtt_client.config",
        "peekOfCode": "class ConfigurationManager:\n    \"\"\"Responsible for managing configuration and environment variables\"\"\"\n    REQUIRED_ENV_VARS = {\n        'MQTT_BROKER': 'HiveMQ Cloud broker URL',\n        'MQTT_USERNAME': 'HiveMQ Cloud username',\n        'MQTT_PASSWORD': 'HiveMQ Cloud password',\n        'HIVEMQ_CLOUD_CERT': 'HiveMQ Cloud CA certificate'\n    }\n    def __init__(self):\n        self._validate_env_vars()",
        "detail": "mqtt_client.config",
        "documentation": {}
    },
    {
        "label": "ConnectionHandler",
        "kind": 6,
        "importPath": "mqtt_client.connection_handler",
        "description": "mqtt_client.connection_handler",
        "peekOfCode": "class ConnectionHandler(ABC):\n    \"\"\"Abstract base class for connection handling\"\"\"\n    @abstractmethod\n    def on_connect(self, client: Any, userdata: Any, flags: Dict, rc: int, properties: Optional[Dict] = None) -> None:\n        pass\n    @abstractmethod\n    def on_disconnect(self, client: Any, userdata: Any, rc: int, properties: Optional[Dict] = None) -> None:\n        pass\nclass DefaultConnectionHandler(ConnectionHandler):\n    \"\"\"Default implementation of connection handling\"\"\"",
        "detail": "mqtt_client.connection_handler",
        "documentation": {}
    },
    {
        "label": "DefaultConnectionHandler",
        "kind": 6,
        "importPath": "mqtt_client.connection_handler",
        "description": "mqtt_client.connection_handler",
        "peekOfCode": "class DefaultConnectionHandler(ConnectionHandler):\n    \"\"\"Default implementation of connection handling\"\"\"\n    def __init__(self):\n        self.connected = False\n        self.subscribed_topics = set()\n    def on_connect(self, client: Any, userdata: Any, flags: Dict, rc: int, properties: Optional[Dict] = None) -> None:\n        connection_codes = {\n            0: \"Connection successful\",\n            1: \"Connection refused - incorrect protocol version\",\n            2: \"Connection refused - invalid client identifier\",",
        "detail": "mqtt_client.connection_handler",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "mqtt_client.message_handler",
        "description": "mqtt_client.message_handler",
        "peekOfCode": "class Message:\n    \"\"\"Data class for MQTT messages\"\"\"\n    topic: str\n    payload: str\n    timestamp: str\n    qos: int\nclass MessageHandler(ABC):\n    \"\"\"Abstract base class for message handling\"\"\"\n    @abstractmethod\n    def handle_message(self, message: Message) -> None:",
        "detail": "mqtt_client.message_handler",
        "documentation": {}
    },
    {
        "label": "MessageHandler",
        "kind": 6,
        "importPath": "mqtt_client.message_handler",
        "description": "mqtt_client.message_handler",
        "peekOfCode": "class MessageHandler(ABC):\n    \"\"\"Abstract base class for message handling\"\"\"\n    @abstractmethod\n    def handle_message(self, message: Message) -> None:\n        pass\nclass DefaultMessageHandler(MessageHandler):\n    \"\"\"Default implementation of message handling\"\"\"\n    def __init__(self):\n        self.message_history: List[Message] = []\n    def handle_message(self, message: Message) -> None:",
        "detail": "mqtt_client.message_handler",
        "documentation": {}
    },
    {
        "label": "DefaultMessageHandler",
        "kind": 6,
        "importPath": "mqtt_client.message_handler",
        "description": "mqtt_client.message_handler",
        "peekOfCode": "class DefaultMessageHandler(MessageHandler):\n    \"\"\"Default implementation of message handling\"\"\"\n    def __init__(self):\n        self.message_history: List[Message] = []\n    def handle_message(self, message: Message) -> None:\n        self.message_history.append(message)\n        logging.info(\n            f\"Message received - Topic: {message.topic}, QoS: {message.qos}\")\n        logging.debug(f\"Message payload: {message.payload}\")",
        "detail": "mqtt_client.message_handler",
        "documentation": {}
    },
    {
        "label": "MQTTClientWrapper",
        "kind": 6,
        "importPath": "mqtt_client.mqtt_client",
        "description": "mqtt_client.mqtt_client",
        "peekOfCode": "class MQTTClientWrapper:\n    \"\"\"Main MQTT client wrapper implementing high-level MQTT operations\"\"\"\n    def __init__(\n        self,\n        config: Dict[str, str],\n        ssl_factory: SSLContextFactory,\n        message_handler: MessageHandler,\n        connection_handler: ConnectionHandler\n    ):\n        self.config = config",
        "detail": "mqtt_client.mqtt_client",
        "documentation": {}
    },
    {
        "label": "SSLContextFactory",
        "kind": 6,
        "importPath": "mqtt_client.ssl_context",
        "description": "mqtt_client.ssl_context",
        "peekOfCode": "class SSLContextFactory(ABC):\n    \"\"\"Abstract factory for SSL context creation\"\"\"\n    @abstractmethod\n    def create_ssl_context(self) -> ssl.SSLContext:\n        pass\nclass HiveMQSSLContextFactory(SSLContextFactory):\n    \"\"\"Concrete factory for HiveMQ SSL context\"\"\"\n    def __init__(self, ca_cert: str):\n        if not ca_cert:\n            raise ValueError(\"CA certificate is empty\")",
        "detail": "mqtt_client.ssl_context",
        "documentation": {}
    },
    {
        "label": "HiveMQSSLContextFactory",
        "kind": 6,
        "importPath": "mqtt_client.ssl_context",
        "description": "mqtt_client.ssl_context",
        "peekOfCode": "class HiveMQSSLContextFactory(SSLContextFactory):\n    \"\"\"Concrete factory for HiveMQ SSL context\"\"\"\n    def __init__(self, ca_cert: str):\n        if not ca_cert:\n            raise ValueError(\"CA certificate is empty\")\n        # Clean the certificate string\n        cert = ca_cert.strip().strip('\"').strip(\"'\")\n        # Split into lines and clean each line\n        cert_parts = cert.split()\n        # Reconstruct certificate with proper line breaks",
        "detail": "mqtt_client.ssl_context",
        "documentation": {}
    }
]